[
  "        self.history_set = set()\n        self.pinned_set = set()",
  "from PyQt5.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QListWidget, QPushButton, \n    QMessageBox, QLabel, QSplitter, QFrame, QListWidgetItem, QMenu, QAction,\n    QLineEdit, QToolButton, QSizePolicy\n)\nfrom PyQt5.QtCore import Qt, pyqtSignal, QTimer, QSize\nfrom PyQt5.QtGui import QFont, QPalette, QColor, QIcon, QPixmap, QPainter\nimport pyperclip\nfrom storage import save_clips, save_pins\n\nclass SearchableListWidget(QListWidget):\n    \"\"\"Enhanced list widget with search functionality\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.all_items = []\n        \n    def addItem(self, text):\n        super().addItem(text)\n        self.all_items.append(text)\n    \n    def insertItem(self, row, text):\n        super().insertItem(row, text)\n        self.all_items.insert(row, text)\n    \n    def clear(self):\n        super().clear()\n        self.all_items.clear()\n    \n    def takeItem(self, row):\n        item = super().takeItem(row)\n        if item and row < len(self.all_items):\n            self.all_items.pop(row)\n        return item\n    \n    def filter_items(self, search_text):\n        \"\"\"Filter items based on search text\"\"\"\n        self.clear()\n        if not search_text:\n            for item in self.all_items:\n                self.addItem(item)\n        else:\n            for item in self.all_items:\n                if search_text.lower() in item.lower():\n                    self.addItem(item)\n\nclass StyledButton(QPushButton):\n    \"\"\"Custom styled button\"\"\"\n    def __init__(self, text, icon_text=\"\", primary=False):\n        super().__init__()\n        self.setText(f\"{icon_text} {text}\" if icon_text else text)\n        self.setMinimumHeight(35)\n        self.setFont(QFont(\"Segoe UI\", 9))\n        \n        if primary:\n            self.setStyleSheet(\"\"\"\n                QPushButton {\n                    background-color: #0078d4;\n                    color: white;\n                    border: none;\n                    border-radius: 6px;\n                    font-weight: bold;\n                    padding: 8px 16px;\n                }\n                QPushButton:hover {\n                    background-color: #106ebe;\n                }\n                QPushButton:pressed {\n                    background-color: #005a9e;\n                }\n            \"\"\")\n        else:\n            self.setStyleSheet(\"\"\"\n                QPushButton {\n                    background-color: #f3f2f1;\n                    color: #323130;\n                    border: 1px solid #d2d0ce;\n                    border-radius: 6px;\n                    padding: 8px 16px;\n                }\n                QPushButton:hover {\n                    background-color: #edebe9;\n                    border-color: #c7c6c4;\n                }\n                QPushButton:pressed {\n                    background-color: #e1dfdd;\n                }\n                QPushButton:disabled {\n                    background-color: #f3f2f1;\n                    color: #a19f9d;\n                    border-color: #e1dfdd;\n                }\n            \"\"\")\n\nclass ClipStackGUI(QWidget):\n    clip_selected = pyqtSignal(str)\n    \n    def __init__(self, on_select_clip=None):\n        super().__init__()\n        self.on_select_clip = on_select_clip\n        self.setup_ui()\n        self.setup_context_menus()\n        self.setup_shortcuts()\n        \n        # Auto-refresh timer for clipboard monitoring\n        self.refresh_timer = QTimer()\n        self.refresh_timer.timeout.connect(self.check_clipboard)\n        self.refresh_timer.start(1000)  # Check every second\n        \n        self.last_clipboard = \"\"\n        \n    def setup_ui(self):\n        self.setWindowTitle(\"\ud83d\udccb Clipboard Manager\")\n        self.setFixedSize(600, 700)\n        self.setStyleSheet(\"\"\"\n            QWidget {\n                background-color: #faf9f8;\n                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            }\n            QLabel {\n                color: #323130;\n                font-weight: bold;\n                font-size: 12px;\n                margin: 8px 0 4px 0;\n            }\n            QListWidget {\n                background-color: white;\n                border: 1px solid #d2d0ce;\n                border-radius: 8px;\n                padding: 4px;\n                font-size: 11px;\n                selection-background-color: #deecf9;\n                selection-color: #323130;\n            }\n            QListWidget::item {\n                padding: 8px;\n                border-bottom: 1px solid #f3f2f1;\n                border-radius: 4px;\n                margin: 1px;\n            }\n            QListWidget::item:hover {\n                background-color: #f3f2f1;\n            }\n            QListWidget::item:selected {\n                background-color: #deecf9;\n                border: 1px solid #0078d4;\n            }\n            QLineEdit {\n                background-color: white;\n                border: 2px solid #d2d0ce;\n                border-radius: 6px;\n                padding: 8px;\n                font-size: 11px;\n            }\n            QLineEdit:focus {\n                border-color: #0078d4;\n            }\n        \"\"\")\n\n        # Main layout\n        main_layout = QVBoxLayout()\n        main_layout.setSpacing(12)\n        main_layout.setContentsMargins(16, 16, 16, 16)\n\n        # Header\n        header_label = QLabel(\"\ud83d\udccb Clipboard Manager\")\n        header_label.setStyleSheet(\"\"\"\n            font-size: 18px;\n            font-weight: bold;\n            color: #323130;\n            margin-bottom: 8px;\n        \"\"\")\n        main_layout.addWidget(header_label)\n\n        # Splitter for resizable sections\n        splitter = QSplitter(Qt.Vertical)\n        \n        # Pinned section\n        pinned_frame = QFrame()\n        pinned_layout = QVBoxLayout(pinned_frame)\n        \n        # Pinned header with count\n        pinned_header_layout = QHBoxLayout()\n        self.label_pinned = QLabel(\"\ud83d\udccc Pinned Clips\")\n        self.pinned_count_label = QLabel(\"(0)\")\n        self.pinned_count_label.setStyleSheet(\"color: #605e5c; font-weight: normal;\")\n        pinned_header_layout.addWidget(self.label_pinned)\n        pinned_header_layout.addWidget(self.pinned_count_label)\n        pinned_header_layout.addStretch()\n        pinned_layout.addLayout(pinned_header_layout)\n        \n        self.pinned_list = SearchableListWidget()\n        self.pinned_list.setMaximumHeight(200)\n        self.pinned_list.itemDoubleClicked.connect(self.copy_selected)\n        pinned_layout.addWidget(self.pinned_list)\n        \n        # History section\n        history_frame = QFrame()\n        history_layout = QVBoxLayout(history_frame)\n        \n        # History header with search and count\n        history_header_layout = QHBoxLayout()\n        self.label_history = QLabel(\"\ud83d\udd52 Clipboard History\")\n        self.history_count_label = QLabel(\"(0)\")\n        self.history_count_label.setStyleSheet(\"color: #605e5c; font-weight: normal;\")\n        history_header_layout.addWidget(self.label_history)\n        history_header_layout.addWidget(self.history_count_label)\n        history_header_layout.addStretch()\n        history_layout.addLayout(history_header_layout)\n        \n        # Search box\n        self.search_box = QLineEdit()\n        self.search_box.setPlaceholderText(\"\ud83d\udd0d Search clipboard history...\")\n        self.search_box.textChanged.connect(self.filter_history)\n        history_layout.addWidget(self.search_box)\n        \n        self.clip_list = SearchableListWidget()\n        self.clip_list.itemDoubleClicked.connect(self.copy_selected)\n        history_layout.addWidget(self.clip_list)\n        \n        # Add frames to splitter\n        splitter.addWidget(pinned_frame)\n        splitter.addWidget(history_frame)\n        splitter.setStretchFactor(0, 0)  # Pinned section doesn't stretch much\n        splitter.setStretchFactor(1, 1)  # History section takes most space\n        \n        main_layout.addWidget(splitter)\n\n        # Button layout\n        button_layout = QHBoxLayout()\n        button_layout.setSpacing(8)\n        \n        # Primary action buttons\n        self.copy_button = StyledButton(\"Copy\", \"\ud83d\udccb\", primary=True)\n        self.pin_button = StyledButton(\"Pin\", \"\ud83d\udccc\")\n        \n        # Secondary action buttons  \n        self.unpin_button = StyledButton(\"Unpin\", \"\ud83d\udccc\")\n        self.clear_button = StyledButton(\"Clear History\", \"\ud83d\uddd1\ufe0f\")\n        \n        button_layout.addWidget(self.copy_button)\n        button_layout.addWidget(self.pin_button)\n        button_layout.addWidget(self.unpin_button)\n        button_layout.addStretch()\n        button_layout.addWidget(self.clear_button)\n        \n        main_layout.addLayout(button_layout)\n        \n        # Status bar\n        self.status_label = QLabel(\"Ready\")\n        self.status_label.setStyleSheet(\"\"\"\n            color: #605e5c;\n            font-size: 10px;\n            padding: 4px;\n            background-color: #f3f2f1;\n            border-radius: 4px;\n        \"\"\")\n        main_layout.addWidget(self.status_label)\n\n        self.setLayout(main_layout)\n\n        # Connect signals\n        self.copy_button.clicked.connect(self.copy_selected)\n        self.pin_button.clicked.connect(self.pin_selected)\n        self.clear_button.clicked.connect(self.clear_clips)\n        self.unpin_button.clicked.connect(self.unpin_selected)\n        \n        # Enable/disable buttons based on selection\n        self.pinned_list.itemSelectionChanged.connect(self.update_button_states)\n        self.clip_list.itemSelectionChanged.connect(self.update_button_states)\n        \n        self.update_button_states()\n        self.update_counts()\n\n    def setup_context_menus(self):\n        \"\"\"Setup right-click context menus\"\"\"\n        self.pinned_list.setContextMenuPolicy(Qt.CustomContextMenu)\n        self.pinned_list.customContextMenuRequested.connect(self.show_pinned_context_menu)\n        \n        self.clip_list.setContextMenuPolicy(Qt.CustomContextMenu)\n        self.clip_list.customContextMenuRequested.connect(self.show_history_context_menu)\n\n    def setup_shortcuts(self):\n        \"\"\"Setup keyboard shortcuts\"\"\"\n        from PyQt5.QtWidgets import QShortcut\n        from PyQt5.QtGui import QKeySequence\n        \n        # Ctrl+C to copy selected\n        copy_shortcut = QShortcut(QKeySequence(\"Ctrl+C\"), self)\n        copy_shortcut.activated.connect(self.copy_selected)\n        \n        # Delete to remove item\n        delete_shortcut = QShortcut(QKeySequence(\"Delete\"), self)\n        delete_shortcut.activated.connect(self.delete_selected)\n\n    def show_pinned_context_menu(self, position):\n        \"\"\"Show context menu for pinned items\"\"\"\n        if self.pinned_list.itemAt(position):\n            menu = QMenu()\n            copy_action = menu.addAction(\"\ud83d\udccb Copy\")\n            unpin_action = menu.addAction(\"\ud83d\udccc Unpin\")\n            menu.addSeparator()\n            delete_action = menu.addAction(\"\ud83d\uddd1\ufe0f Delete\")\n            \n            action = menu.exec_(self.pinned_list.mapToGlobal(position))\n            if action == copy_action:\n                self.copy_selected()\n            elif action == unpin_action:\n                self.unpin_selected()\n            elif action == delete_action:\n                self.delete_selected()\n\n    def show_history_context_menu(self, position):\n        \"\"\"Show context menu for history items\"\"\"\n        if self.clip_list.itemAt(position):\n            menu = QMenu()\n            copy_action = menu.addAction(\"\ud83d\udccb Copy\")\n            pin_action = menu.addAction(\"\ud83d\udccc Pin\")\n            menu.addSeparator()\n            delete_action = menu.addAction(\"\ud83d\uddd1\ufe0f Delete\")\n            \n            action = menu.exec_(self.clip_list.mapToGlobal(position))\n            if action == copy_action:\n                self.copy_selected()\n            elif action == pin_action:\n                self.pin_selected()\n            elif action == delete_action:\n                self.delete_selected()\n\n    def filter_history(self):\n        \"\"\"Filter history based on search text\"\"\"\n        search_text = self.search_box.text()\n        self.clip_list.filter_items(search_text)\n\n    def update_button_states(self):\n        \"\"\"Enable/disable buttons based on current selection\"\"\"\n        pinned_selected = self.pinned_list.currentItem() is not None\n        history_selected = self.clip_list.currentItem() is not None\n        \n        self.copy_button.setEnabled(pinned_selected or history_selected)\n        self.pin_button.setEnabled(history_selected)\n        self.unpin_button.setEnabled(pinned_selected)\n\n    def update_counts(self):\n        \"\"\"Update the count labels\"\"\"\n        pinned_count = self.pinned_list.count()\n        history_count = self.clip_list.count()\n        \n        self.pinned_count_label.setText(f\"({pinned_count})\")\n        self.history_count_label.setText(f\"({history_count})\")\n\n    def update_status(self, message, duration=3000):\n        \"\"\"Update status message\"\"\"\n        self.status_label.setText(message)\n        QTimer.singleShot(duration, lambda: self.status_label.setText(\"Ready\"))\n\n    def check_clipboard(self):\n        \"\"\"Check for new clipboard content\"\"\"\n        try:\n            current_clipboard = pyperclip.paste()\n            if current_clipboard and current_clipboard != self.last_clipboard:\n                self.add_clip(current_clipboard)\n                self.last_clipboard = current_clipboard\n                self.update_status(\"New clipboard item added\")\n        except:\n            pass  # Ignore clipboard access errors\n\n    def add_clip(self, clip):\n        \"\"\"Add clip to history, avoiding duplicates\"\"\"\n        if not clip.strip():\n            return\n            \n        # Remove from history if it exists\n        for i in range(self.clip_list.count()):\n            if self.clip_list.item(i).text() == clip:\n                self.clip_list.takeItem(i)\n                break\n        \n        # Don't add if it's already pinned\n        for i in range(self.pinned_list.count()):\n            if self.pinned_list.item(i).text() == clip:\n                return\n                \n        # Add to top of history\n        self.clip_list.insertItem(0, clip)\n        \n        # Limit history size\n        while self.clip_list.count() > 50:\n            self.clip_list.takeItem(self.clip_list.count() - 1)\n            \n        self.update_counts()\n\n    def add_pin(self, clip):\n        \"\"\"Add clip to pinned list\"\"\"\n        if not self.pinned_list.findItems(clip, Qt.MatchExactly):\n            self.pinned_list.insertItem(0, clip)\n            self.update_counts()\n\n    def load_initial_clips(self, clips):\n        \"\"\"Load initial clipboard history\"\"\"\n        for clip in reversed(clips):\n            if clip.strip():\n                self.add_clip(clip)\n\n    def load_initial_pins(self, pins):\n        \"\"\"Load initial pinned clips\"\"\"\n        for pin in reversed(pins):\n            if pin.strip():\n                self.add_pin(pin)\n\n    def copy_selected(self):\n        \"\"\"Copy selected item to clipboard\"\"\"\n        item = self.pinned_list.currentItem() or self.clip_list.currentItem()\n        if item:\n            clip_text = item.text()\n            if self.on_select_clip:\n                self.on_select_clip(clip_text)\n            self.update_status(f\"Copied: {clip_text[:50]}{'...' if len(clip_text) > 50 else ''}\")\n\n    def pin_selected(self):\n        \"\"\"Pin selected history item\"\"\"\n        item = self.clip_list.currentItem()\n        if item:\n            clip_text = item.text()\n            self.add_pin(clip_text)\n            \n            # Remove from history\n            self.clip_list.takeItem(self.clip_list.row(item))\n            \n            # Save changes\n            self.save_data()\n            self.update_status(f\"Pinned: {clip_text[:30]}{'...' if len(clip_text) > 30 else ''}\")\n\n    def unpin_selected(self):\n        \"\"\"Unpin selected pinned item\"\"\"\n        item = self.pinned_list.currentItem()\n        if item:\n            clip_text = item.text()\n            self.pinned_list.takeItem(self.pinned_list.row(item))\n            self.add_clip(clip_text)\n            \n            # Save changes\n            self.save_data()\n            self.update_status(f\"Unpinned: {clip_text[:30]}{'...' if len(clip_text) > 30 else ''}\")\n\n    def delete_selected(self):\n        \"\"\"Delete selected item\"\"\"\n        if self.pinned_list.currentItem():\n            item = self.pinned_list.currentItem()\n            self.pinned_list.takeItem(self.pinned_list.row(item))\n            self.save_data()\n            self.update_status(\"Pinned item deleted\")\n        elif self.clip_list.currentItem():\n            item = self.clip_list.currentItem()\n            self.clip_list.takeItem(self.clip_list.row(item))\n            self.save_data()\n            self.update_status(\"History item deleted\")\n\n    def clear_clips(self):\n        \"\"\"Clear clipboard history with confirmation\"\"\"\n        reply = QMessageBox.question(\n            self, 'Clear History?', \n            'Are you sure you want to clear all clipboard history?\\n(Pinned clips will remain)',\n            QMessageBox.Yes | QMessageBox.No, QMessageBox.No\n        )\n        if reply == QMessageBox.Yes:\n            self.clip_list.clear()\n            self.search_box.clear()\n            save_clips([])\n            self.update_counts()\n            self.update_status(\"Clipboard history cleared\")\n\n    def save_data(self):\n        \"\"\"Save both pins and clips\"\"\"\n        pins = [self.pinned_list.item(i).text() for i in range(self.pinned_list.count())]\n        history = [self.clip_list.item(i).text() for i in range(self.clip_list.count())]\n        save_pins(pins)\n        save_clips(history)\n        self.update_counts()"
]